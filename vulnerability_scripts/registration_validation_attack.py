#!/usr/bin/env python3
"""
SecureDove Registration Validation Attack Script
Tests input validation vulnerabilities in the user registration endpoint.

VULNERABILITIES EXPLOITED:
1. No format validation on public_key (should be base64, specific length)
2. No format validation on salt (should be base64, specific length)
3. No format validation on encrypted_private_key
4. No size limits on cryptographic fields (can register with gigabytes)
5. Username validation bypasses with edge cases
6. Password complexity not enforced

Attack Vector:
POST /api/auth/register with malformed cryptographic fields
"""

import requests
import sys
import time
import json
from typing import Dict, List

class RegistrationValidationAttacker:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url.rstrip('/')
        self.api_url = f"{self.base_url}/api"
        self.session = requests.Session()
        
    def test_cryptographic_field_validation(self) -> List[Dict]:
        """Test validation of public_key, salt, and encrypted_private_key"""
        print("\n" + "="*70)
        print("TESTING CRYPTOGRAPHIC FIELD VALIDATION")
        print("="*70)
        
        test_cases = [
            {
                "name": "Empty public_key",
                "username": f"test_empty_pk_{int(time.time())}",
                "public_key": "",
                "salt": "valid_salt",
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "Extremely long public_key (1MB)",
                "username": f"test_long_pk_{int(time.time())}",
                "public_key": "A" * (1024 * 1024),
                "salt": "valid_salt",
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "SQL injection in public_key",
                "username": f"test_sql_pk_{int(time.time())}",
                "public_key": "'; DROP TABLE users; --",
                "salt": "valid_salt",
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "Null bytes in public_key",
                "username": f"test_null_pk_{int(time.time())}",
                "public_key": "key\x00with\x00nulls",
                "salt": "valid_salt",
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "Invalid base64 characters in public_key",
                "username": f"test_invalid_pk_{int(time.time())}",
                "public_key": "!@#$%^&*()",
                "salt": "valid_salt",
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "Extremely long salt (1MB)",
                "username": f"test_long_salt_{int(time.time())}",
                "public_key": "valid_pk",
                "salt": "B" * (1024 * 1024),
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "Empty salt",
                "username": f"test_empty_salt_{int(time.time())}",
                "public_key": "valid_pk",
                "salt": "",
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "SQL injection in salt",
                "username": f"test_sql_salt_{int(time.time())}",
                "public_key": "valid_pk",
                "salt": "1' OR '1'='1",
                "encrypted_private_key": "valid_epk"
            },
            {
                "name": "Extremely long encrypted_private_key (5MB)",
                "username": f"test_long_epk_{int(time.time())}",
                "public_key": "valid_pk",
                "salt": "valid_salt",
                "encrypted_private_key": "C" * (5 * 1024 * 1024)
            },
            {
                "name": "Empty encrypted_private_key",
                "username": f"test_empty_epk_{int(time.time())}",
                "public_key": "valid_pk",
                "salt": "valid_salt",
                "encrypted_private_key": ""
            },
            {
                "name": "JSON injection in encrypted_private_key",
                "username": f"test_json_epk_{int(time.time())}",
                "public_key": "valid_pk",
                "salt": "valid_salt",
                "encrypted_private_key": '{"injected": "data", "admin": true}'
            },
            {
                "name": "Unicode overflow in all crypto fields",
                "username": f"test_unicode_{int(time.time())}",
                "public_key": "ðŸ”‘" * 1000,
                "salt": "ðŸ§‚" * 1000,
                "encrypted_private_key": "ðŸ”’" * 1000
            },
        ]
        
        results = []
        for test_case in test_cases:
            print(f"\n[*] Testing: {test_case['name']}")
            
            try:
                payload = {
                    "username": test_case['username'],
                    "password": "ValidPass123!",
                    "public_key": test_case['public_key'],
                    "salt": test_case['salt'],
                    "encrypted_private_key": test_case['encrypted_private_key']
                }
                
                start_time = time.time()
                response = self.session.post(
                    f"{self.api_url}/auth/register",
                    json=payload,
                    timeout=30
                )
                duration = time.time() - start_time
                
                if response.status_code in [200, 201]:
                    print(f"[!] VULNERABILITY: Accepted invalid crypto field!")
                    print(f"[!] Processing time: {duration:.2f}s")
                    vulnerable = True
                else:
                    print(f"[-] Correctly rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": test_case['name'],
                    "vulnerable": vulnerable,
                    "status_code": response.status_code,
                    "duration": f"{duration:.2f}s"
                })
                
            except requests.exceptions.Timeout:
                print(f"[!] TIMEOUT: Server hung (DoS indicator)")
                results.append({
                    "test": test_case['name'],
                    "vulnerable": True,
                    "error": "Timeout - DoS potential"
                })
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": test_case['name'],
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.5)
        
        return results
    
    def test_username_edge_cases(self) -> List[Dict]:
        """Test username validation edge cases"""
        print("\n" + "="*70)
        print("TESTING USERNAME VALIDATION EDGE CASES")
        print("="*70)
        
        test_cases = [
            ("Minimum length (3 chars)", "abc"),
            ("Maximum length (20 chars)", "a" * 20),
            ("Just over max (21 chars)", "a" * 21),
            ("Just under min (2 chars)", "ab"),
            ("All underscores", "___"),
            ("All hyphens", "---"),
            ("Mixed case", "TeSt_UsEr"),
            ("Leading hyphen", "-testuser"),
            ("Trailing hyphen", "testuser-"),
            ("Leading underscore", "_testuser"),
            ("Trailing underscore", "testuser_"),
            ("Multiple hyphens", "test--user"),
            ("Multiple underscores", "test__user"),
            ("Numbers only", "123456"),
            ("Special boundary", "a-_b-_c"),
        ]
        
        results = []
        for description, username in test_cases:
            print(f"\n[*] Testing: {description}")
            print(f"[*] Username: '{username}' (length: {len(username)})")
            
            try:
                payload = {
                    "username": username,
                    "password": "ValidPass123!",
                    "public_key": "test_pk",
                    "salt": "test_salt",
                    "encrypted_private_key": "test_epk"
                }
                
                response = self.session.post(
                    f"{self.api_url}/auth/register",
                    json=payload,
                    timeout=5
                )
                
                # Username should be valid for 3-20 alphanumeric + _ -
                expected_valid = (
                    3 <= len(username) <= 20 and
                    all(c.isalnum() or c in '_-' for c in username)
                )
                
                actual_accepted = response.status_code in [200, 201]
                
                if actual_accepted != expected_valid:
                    print(f"[!] VULNERABILITY: Unexpected validation behavior!")
                    print(f"    Expected valid: {expected_valid}, Actually accepted: {actual_accepted}")
                    vulnerable = True
                else:
                    print(f"[-] Behaved as expected (accepted: {actual_accepted})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "username": username,
                    "vulnerable": vulnerable,
                    "status_code": response.status_code,
                    "expected_valid": expected_valid,
                    "actual_accepted": actual_accepted
                })
                
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "username": username,
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def test_password_validation(self) -> List[Dict]:
        """Test password complexity requirements"""
        print("\n" + "="*70)
        print("TESTING PASSWORD VALIDATION")
        print("="*70)
        
        test_cases = [
            ("Empty password", ""),
            ("Single character", "a"),
            ("Two characters", "ab"),
            ("All lowercase", "password"),
            ("All uppercase", "PASSWORD"),
            ("All numbers", "12345678"),
            ("Common password", "password123"),
            ("Very weak", "123456"),
            ("Extremely long (10KB)", "a" * (10 * 1024)),
            ("SQL injection", "'; DROP TABLE users; --"),
            ("Null bytes", "pass\x00word"),
            ("Unicode characters", "pÃ¤sswÃ¶rdðŸ”’"),
            ("Whitespace only", "        "),
        ]
        
        results = []
        for description, password in test_cases:
            print(f"\n[*] Testing: {description}")
            
            try:
                username = f"pwd_test_{int(time.time() * 1000) % 1000000}"
                
                payload = {
                    "username": username,
                    "password": password,
                    "public_key": "test_pk",
                    "salt": "test_salt",
                    "encrypted_private_key": "test_epk"
                }
                
                response = self.session.post(
                    f"{self.api_url}/auth/register",
                    json=payload,
                    timeout=10
                )
                
                if response.status_code in [200, 201]:
                    print(f"[!] VULNERABILITY: Accepted weak password!")
                    vulnerable = True
                else:
                    print(f"[-] Rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "vulnerable": vulnerable,
                    "status_code": response.status_code
                })
                
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def test_missing_fields(self) -> List[Dict]:
        """Test handling of missing required fields"""
        print("\n" + "="*70)
        print("TESTING MISSING FIELD HANDLING")
        print("="*70)
        
        test_cases = [
            {
                "name": "Missing password",
                "payload": {
                    "username": "testuser",
                    "public_key": "test_pk",
                    "salt": "test_salt",
                    "encrypted_private_key": "test_epk"
                }
            },
            {
                "name": "Missing username",
                "payload": {
                    "password": "ValidPass123!",
                    "public_key": "test_pk",
                    "salt": "test_salt",
                    "encrypted_private_key": "test_epk"
                }
            },
            {
                "name": "Missing public_key",
                "payload": {
                    "username": "testuser",
                    "password": "ValidPass123!",
                    "salt": "test_salt",
                    "encrypted_private_key": "test_epk"
                }
            },
            {
                "name": "Missing salt",
                "payload": {
                    "username": "testuser",
                    "password": "ValidPass123!",
                    "public_key": "test_pk",
                    "encrypted_private_key": "test_epk"
                }
            },
            {
                "name": "Missing encrypted_private_key",
                "payload": {
                    "username": "testuser",
                    "password": "ValidPass123!",
                    "public_key": "test_pk",
                    "salt": "test_salt"
                }
            },
            {
                "name": "Empty payload",
                "payload": {}
            },
            {
                "name": "Null values",
                "payload": {
                    "username": None,
                    "password": None,
                    "public_key": None,
                    "salt": None,
                    "encrypted_private_key": None
                }
            },
        ]
        
        results = []
        for test_case in test_cases:
            print(f"\n[*] Testing: {test_case['name']}")
            
            try:
                response = self.session.post(
                    f"{self.api_url}/auth/register",
                    json=test_case['payload'],
                    timeout=5
                )
                
                # Should always reject missing required fields
                if response.status_code in [200, 201]:
                    print(f"[!] VULNERABILITY: Accepted incomplete registration!")
                    vulnerable = True
                else:
                    print(f"[-] Correctly rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": test_case['name'],
                    "vulnerable": vulnerable,
                    "status_code": response.status_code
                })
                
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": test_case['name'],
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def generate_report(self, crypto_results: List[Dict], username_results: List[Dict],
                       password_results: List[Dict], missing_results: List[Dict]):
        """Generate vulnerability report"""
        print("\n" + "="*70)
        print("REGISTRATION VALIDATION VULNERABILITY REPORT")
        print("="*70)
        
        # Crypto field vulnerabilities
        crypto_vulns = [r for r in crypto_results if r.get('vulnerable')]
        print(f"\n[*] Cryptographic Field Validation:")
        print(f"    Tests: {len(crypto_results)}")
        print(f"    Vulnerabilities: {len(crypto_vulns)}")
        
        if crypto_vulns:
            print(f"\n[!] VULNERABLE CRYPTO FIELDS:")
            for v in crypto_vulns:
                print(f"    - {v['test']}")
        
        # Username vulnerabilities
        username_vulns = [r for r in username_results if r.get('vulnerable')]
        print(f"\n[*] Username Validation:")
        print(f"    Tests: {len(username_results)}")
        print(f"    Vulnerabilities: {len(username_vulns)}")
        
        if username_vulns:
            print(f"\n[!] VULNERABLE USERNAME HANDLING:")
            for v in username_vulns:
                print(f"    - {v['test']}: '{v.get('username', 'N/A')}'")
        
        # Password vulnerabilities
        password_vulns = [r for r in password_results if r.get('vulnerable')]
        print(f"\n[*] Password Validation:")
        print(f"    Tests: {len(password_results)}")
        print(f"    Vulnerabilities: {len(password_vulns)}")
        
        if password_vulns:
            print(f"\n[!] WEAK PASSWORD ACCEPTANCE:")
            for v in password_vulns:
                print(f"    - {v['test']}")
        
        # Missing field vulnerabilities
        missing_vulns = [r for r in missing_results if r.get('vulnerable')]
        print(f"\n[*] Missing Field Handling:")
        print(f"    Tests: {len(missing_results)}")
        print(f"    Vulnerabilities: {len(missing_vulns)}")
        
        if missing_vulns:
            print(f"\n[!] INCOMPLETE DATA ACCEPTED:")
            for v in missing_vulns:
                print(f"    - {v['test']}")
        
        # Total
        total_vulns = len(crypto_vulns) + len(username_vulns) + len(password_vulns) + len(missing_vulns)
        
        print(f"\n{'='*70}")
        print(f"TOTAL VULNERABILITIES: {total_vulns}")
        print(f"{'='*70}")
        
        # Recommendations
        print("\n[*] RECOMMENDATIONS:")
        print("    1. Validate cryptographic field formats:")
        print("       - public_key: base64, expected length (e.g., RSA 2048-bit)")
        print("       - salt: base64, minimum 16 bytes")
        print("       - encrypted_private_key: base64, expected length range")
        print("    2. Enforce maximum field sizes:")
        print("       - public_key: max 4KB")
        print("       - salt: max 256 bytes")
        print("       - encrypted_private_key: max 16KB")
        print("    3. Add password complexity requirements:")
        print("       - Minimum 8-12 characters")
        print("       - Require mix of uppercase, lowercase, numbers")
        print("       - Check against common password lists")
        print("    4. Strict field presence validation:")
        print("       - Reject missing or null required fields")
        print("       - Use schema validation (Joi, Yup)")
        print("    5. Consider cryptographic field validation:")
        print("       - Verify base64 encoding")
        print("       - Check if public key is valid RSA/EC format")
        
        # Save report
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        report_file = f"registration_validation_report_{timestamp}.json"
        
        report_data = {
            "timestamp": timestamp,
            "target": self.api_url,
            "crypto_field_tests": crypto_results,
            "username_tests": username_results,
            "password_tests": password_results,
            "missing_field_tests": missing_results,
            "summary": {
                "total_tests": len(crypto_results) + len(username_results) + len(password_results) + len(missing_results),
                "total_vulnerabilities": total_vulns
            }
        }
        
        try:
            with open(report_file, 'w') as f:
                json.dump(report_data, f, indent=2)
            print(f"\n[+] Report saved to: {report_file}")
        except Exception as e:
            print(f"\n[-] Could not save report: {e}")

def main():
    base_url = "http://localhost:8000"
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    
    print("="*70)
    print("SecureDove Registration Validation Attack Script")
    print("="*70)
    print(f"Target: {base_url}")
    print("="*70)
    
    attacker = RegistrationValidationAttacker(base_url)
    
    # Run tests
    print("\n[*] Starting vulnerability tests...")
    
    crypto_results = attacker.test_cryptographic_field_validation()
    time.sleep(1)
    
    username_results = attacker.test_username_edge_cases()
    time.sleep(1)
    
    password_results = attacker.test_password_validation()
    time.sleep(1)
    
    missing_results = attacker.test_missing_fields()
    
    # Report
    attacker.generate_report(crypto_results, username_results, password_results, missing_results)
    
    print("\n[*] Testing complete!")

if __name__ == "__main__":
    main()
