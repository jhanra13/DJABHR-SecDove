// _tests_/vulnerabilityTests.test.js
import request from 'supertest';
import app, { httpServer } from '../server.js';

const TEST_USER = {
  username: 'existinguser',
  password: 'TestPass!234',
  public_key: 'test_pub',
  salt: 'test_salt',
  encrypted_private_key: 'enc'
};

let authToken = '';

beforeAll(async () => {
  // Ensure test user exists
  await request(app)
    .post('/api/auth/register')
    .send(TEST_USER)
    .catch(() => {}); // ignore conflicts

  // Login to get auth token
  const loginRes = await request(app)
    .post('/api/auth/login')
    .send({ username: TEST_USER.username, password: TEST_USER.password });

  authToken = loginRes.body.token;
});

afterAll(async () => {
  // Close the server
  httpServer.close();
});

describe('Vulnerability Tests', () => {

  it('should prevent SQL Injection on login', async () => {
    const response = await request(app)
      .post('/api/auth/login')
      .send({ username: "' OR 1=1 --", password: 'password' });

    expect(response.status).toBe(401);
    expect(response.body.error).toBeDefined();
  });

  it('should prevent SQL Injection on contact lookup', async () => {
    const response = await request(app)
      .post('/api/contacts/add')
      .send({ username: "' OR 1=1 --" });

    expect(response.status).toBe(404); // Should not find a user
    expect(response.body.error).toBe('User not found');
  });

  it('should not reveal if a username exists', async () => {
    const response = await request(app)
      .post('/api/auth/login')
      .send({ username: 'nonexistentuser', password: 'password' });

    expect(response.status).toBe(401);
    expect(response.body.error).toBeDefined();
  });

  it('should not reveal if a username exists', async () => {
    const response = await request(app)
      .post('/api/contacts/add')
      .send({ username: 'nonexistentuser' });

    expect(response.status).toBe(404);
    expect(response.body.error).toBe('User not found'); // Generic error message
  });

  it('should reject overly long usernames', async () => {
    const longUsername = 'a'.repeat(1001);
    const response = await request(app)
      .post('/api/auth/register')
      .send({
        username: longUsername,
        password: 'password',
        public_key: 'test_key',
        salt: 'test_salt',
        encrypted_private_key: 'test_enc_key',
      });

    expect(response.status).toBe(400);
    expect(response.body.error).toBeDefined();
  });

  it('should prevent adding self as a contact', async () => {
    const response = await request(app)
      .post('/api/contacts')
      .set('Authorization', `Bearer ${authToken}`)
      .send({ contact_username: TEST_USER.username });

    expect(response.status).toBe(400); // app returns 400 for self-add
    expect(response.body.error).toBeDefined();
  });

  it('should prevent adding duplicate contacts', async () => {
    const contactName = 'duplicateuser';

    // Create the contact user first
    await request(app).post('/api/auth/register').send({
      username: contactName,
      password: 'Test123!',
      public_key: 'pubkey',
      salt: 'salt',
      encrypted_private_key: 'enc',
    }).catch(() => {});

    // First add should succeed
    await request(app)
      .post('/api/contacts')
      .set('Authorization', `Bearer ${authToken}`)
      .send({ contact_username: contactName });

    // Second add should fail with 409 Conflict
    const response = await request(app)
      .post('/api/contacts')
      .set('Authorization', `Bearer ${authToken}`)
      .send({ contact_username: contactName });

    expect(response.status).toBe(409);
    expect(response.body.error).toBeDefined();
  });

  it('should handle invalid JSON gracefully', async () => {
    const response = await request(app)
      .post('/api/auth/login')
      .set('Content-Type', 'application/json')
      .send('Invalid JSON');

    expect(response.status).toBe(400);
  });

  it('should prevent XSS in usernames', async () => {
    const xssUsername = `<script>alert('xss')</script>`;
    const response = await request(app)
      .post('/api/auth/register')
      .send({
        username: xssUsername,
        password: 'password',
        public_key: 'test_key',
        salt: 'salt',
        encrypted_private_key: 'enc'
      });

    // Expect input to be rejected
    expect(response.status).toBe(400);
    expect(response.body.error).toBeDefined();
  });

  it('should enforce rate limiting', async () => {
    // Rapidly call login more than limit (depends on your apiLimiter)
    let lastResponse;
    for (let i = 0; i < 15; i++) {
      lastResponse = await request(app)
        .post('/api/auth/login')
        .send({ username: 'fakeuser', password: 'fakepass' });
    }
    // Expect last response to be 429 Too Many Requests if rate limiting triggers
    expect([429, 401]).toContain(lastResponse.status);
  });

  it('should prevent unauthorized contact deletion', async () => {
    const response = await request(app)
      .delete('/api/contacts/1');

    expect(response.status).toBe(401); // Unauthorized
    expect(response.body.error).toBe('Access token required');
  });

});
